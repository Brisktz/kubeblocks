/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

This file is part of KubeBlocks project

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package configuration

import (
	corev1 "k8s.io/api/core/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	appsv1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	workloads "github.com/apecloud/kubeblocks/apis/workloads/v1alpha1"
	"github.com/apecloud/kubeblocks/pkg/constant"
)

// TODO: remove these after addons are migrated to the new API.

// DynamicComponentInfo records information dynamically generated by component controller
type DynamicComponentInfo struct {
	Name       string             `json:"name"`
	Containers []corev1.Container `json:"containers,omitempty"`
}

// buildDynamicCompInfos builds the dynamic comp infos including hostNetWork ports.
func buildDynamicCompInfos(cache []client.Object,
	cluster *appsv1alpha1.Cluster) *[]DynamicComponentInfo {
	var dyCompInfos []DynamicComponentInfo
	_, ok := cluster.Annotations[constant.HostNetworkAnnotationKey]
	if !ok {
		return &dyCompInfos
	}
	for _, v := range cache {
		rsm, ok := v.(*workloads.ReplicatedStateMachine)
		if !ok {
			continue
		}
		compName := rsm.Labels[constant.KBAppComponentLabelKey]
		var containers []corev1.Container
		// build containers ports which generated by component controller.
		for _, container := range rsm.Spec.Template.Spec.Containers {
			containers = append(containers, corev1.Container{Name: container.Name, Ports: container.Ports})
		}
		dyCompInfos = append(dyCompInfos, DynamicComponentInfo{Name: compName, Containers: containers})
	}
	return &dyCompInfos
}
