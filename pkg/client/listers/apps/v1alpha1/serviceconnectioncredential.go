/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceConnectionCredentialLister helps list ServiceConnectionCredentials.
// All objects returned here must be treated as read-only.
type ServiceConnectionCredentialLister interface {
	// List lists all ServiceConnectionCredentials in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceConnectionCredential, err error)
	// ServiceConnectionCredentials returns an object that can list and get ServiceConnectionCredentials.
	ServiceConnectionCredentials(namespace string) ServiceConnectionCredentialNamespaceLister
	ServiceConnectionCredentialListerExpansion
}

// serviceConnectionCredentialLister implements the ServiceConnectionCredentialLister interface.
type serviceConnectionCredentialLister struct {
	indexer cache.Indexer
}

// NewServiceConnectionCredentialLister returns a new ServiceConnectionCredentialLister.
func NewServiceConnectionCredentialLister(indexer cache.Indexer) ServiceConnectionCredentialLister {
	return &serviceConnectionCredentialLister{indexer: indexer}
}

// List lists all ServiceConnectionCredentials in the indexer.
func (s *serviceConnectionCredentialLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceConnectionCredential, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceConnectionCredential))
	})
	return ret, err
}

// ServiceConnectionCredentials returns an object that can list and get ServiceConnectionCredentials.
func (s *serviceConnectionCredentialLister) ServiceConnectionCredentials(namespace string) ServiceConnectionCredentialNamespaceLister {
	return serviceConnectionCredentialNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceConnectionCredentialNamespaceLister helps list and get ServiceConnectionCredentials.
// All objects returned here must be treated as read-only.
type ServiceConnectionCredentialNamespaceLister interface {
	// List lists all ServiceConnectionCredentials in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceConnectionCredential, err error)
	// Get retrieves the ServiceConnectionCredential from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceConnectionCredential, error)
	ServiceConnectionCredentialNamespaceListerExpansion
}

// serviceConnectionCredentialNamespaceLister implements the ServiceConnectionCredentialNamespaceLister
// interface.
type serviceConnectionCredentialNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceConnectionCredentials in the indexer for a given namespace.
func (s serviceConnectionCredentialNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceConnectionCredential, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceConnectionCredential))
	})
	return ret, err
}

// Get retrieves the ServiceConnectionCredential from the indexer for a given namespace and name.
func (s serviceConnectionCredentialNamespaceLister) Get(name string) (*v1alpha1.ServiceConnectionCredential, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceconnectioncredential"), name)
	}
	return obj.(*v1alpha1.ServiceConnectionCredential), nil
}
