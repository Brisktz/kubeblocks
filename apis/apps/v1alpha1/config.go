/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

This file is part of KubeBlocks project

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package v1alpha1

import "encoding/json"

// ConfigurationPhase defines the Configuration FSM phase
// +enum
// +kubebuilder:validation:Enum={CInitPhase,CRunningPhase,CInitFailedPhase,CFailedPhase,CRollbackPhase,CDeletingPhase,CFinishedPhase}
type ConfigurationPhase string

const (
	CInitPhase       ConfigurationPhase = "Init"
	CRunningPhase    ConfigurationPhase = "Running"
	CInitFailedPhase ConfigurationPhase = "InitFailed"
	CFailedPhase     ConfigurationPhase = "Failed"
	CRollbackPhase   ConfigurationPhase = "Rollback"
	CDeletingPhase   ConfigurationPhase = "Deleting"
	CFinishedPhase   ConfigurationPhase = "Finished"
)

type ConfigParams struct {
	// Data holds the configuration keys and values.
	// This field exists to work around https://github.com/kubernetes-sigs/kubebuilder/issues/528
	// https://github.com/kubernetes/code-generator/issues/50
	ConfigItem map[string]interface{} `json:"-"`
}

// MarshalJSON implements the Marshaler interface.
func (c *ConfigParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.ConfigItem)
}

// UnmarshalJSON implements the Unmarshaler interface.
func (c *ConfigParams) UnmarshalJSON(data []byte) error {
	var out map[string]interface{}
	err := json.Unmarshal(data, &out)
	if err != nil {
		return err
	}
	c.ConfigItem = out
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (c *ConfigParams) DeepCopyInto(out *ConfigParams) {
	if c.ConfigItem == nil {
		return
	}
	if len(c.ConfigItem) == 0 {
		out.ConfigItem = map[string]interface{}{}
		return
	}

	// TODO how to do when occurs error: panic or ignore?
	bytes, err := json.Marshal(c.ConfigItem)
	if err != nil {
		return
		// panic(err)
	}
	var clone map[string]interface{}
	err = json.Unmarshal(bytes, &clone)
	if err != nil {
		return
	}
	out.ConfigItem = clone
}
